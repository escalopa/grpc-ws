// Code generated by protoc-gen-catalystgo. DO NOT EDIT.

package chat

import (
	context "context"
	_ "embed"

	go_grpc_middleware "github.com/grpc-ecosystem/go-grpc-middleware"
	"github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	"google.golang.org/grpc"
)

//go:embed chat.swagger.json
var swaggerJSON []byte

type ChatServiceServiceDesc struct {
	svc ChatServiceServer
	i   grpc.UnaryServerInterceptor
}

func NewChatServiceServiceDesc(svc ChatServiceServer) *ChatServiceServiceDesc {
	return &ChatServiceServiceDesc{
		svc: svc,
	}
}

func (d *ChatServiceServiceDesc) RegisterGRPC(s *grpc.Server) {
	RegisterChatServiceServer(s, d.svc)
}

func (d *ChatServiceServiceDesc) RegisterHTTP(ctx context.Context, mux *runtime.ServeMux) error {
	if d.i == nil {
		return RegisterChatServiceHandlerServer(ctx, mux, d.svc)
	}

	return RegisterChatServiceHandlerServer(ctx, mux, &proxyChatServiceServer{
		ChatServiceServer: d.svc,
		interceptor:       d.i,
	})
}

func (d *ChatServiceServiceDesc) SwaggerJSON() []byte {
	return swaggerJSON
}

// WithHTTPUnaryInterceptor adds GRPC Server interceptors for the HTTP unary endpoints. Call again to add more.
func (d *ChatServiceServiceDesc) WithHTTPUnaryInterceptor(i grpc.UnaryServerInterceptor) {
	if d.i == nil {
		d.i = i
	} else {
		d.i = go_grpc_middleware.ChainUnaryServer(d.i, i)
	}
}

type proxyChatServiceServer struct {
	ChatServiceServer
	interceptor grpc.UnaryServerInterceptor
}
